[package]
name = "hbnode-cli"
version = "2.0.0"
authors = ["Parity Technologies <admin@parity.io>"]
description = "Substrate node implementation in Rust."
build = "build.rs"
edition = "2018"
default-run = "substrate-hb"

[[bin]]
name = "substrate-hb"
path = "bin/main.rs"
required-features = ["cli"]

[dependencies]
# third-party dependencies
codec = { package = "parity-scale-codec", version = "1.0.6" }
futures = "0.1.29"
hex-literal = "0.2.1"
jsonrpc-core = "14.0.3"
log = "0.4.8"
rand = "0.7.2"
serde = { version = "1.0.102", features = [ "derive" ] }
structopt = "0.3.3"
futures03 = { package = "futures-preview", version = "=0.3.0-alpha.19", features = ["compat"] }

# primitives dependencies
primitives = { package = "substrate-primitives", path = "../../core/primitives" }
sr-primitives = { path = "../../core/sr-primitives" }
badger_primitives = { package = "substrate-badger-primitives", path = "../../core/hbbft/primitives" }

# core dependencies
sr-io = { path = "../../core/sr-io" }
client = { package = "substrate-client", path = "../../core/client" }
inherents = { package = "substrate-inherents", path = "../../core/inherents" }
transaction_pool = { package = "substrate-transaction-pool", path = "../../core/transaction-pool" }
network = { package = "substrate-network", path = "../../core/network" }
keyring = { package = "substrate-keyring", path = "../../core/keyring" }
badger = { package = "substrate-badger-mushroom", path = "../../core/hbbft" }
substrate-rpc = { package = "substrate-rpc", path = "../../core/rpc" }
substrate-basic-authorship = { path = "../../core/basic-authorship" }
substrate-service = { path = "../../core/service" }
substrate-telemetry = { package = "substrate-telemetry", path = "../../core/telemetry" }

# srml dependencies
indices = { package = "srml-indices", path = "../../srml/indices" }
timestamp = { package = "srml-timestamp", path = "../../srml/timestamp", default-features = false }
finality_tracker = { package = "srml-finality-tracker", path = "../../srml/finality-tracker", default-features = false }
system = { package = "srml-system", path = "../../srml/system" }
balances = { package = "srml-balances", path = "../../srml/balances", default-features = false }
keygen = { package="substrate-keygen", path = "../../core/keygen" }
transaction-payment = { package = "srml-transaction-payment", path = "../../srml/transaction-payment" }
offchain = { package = "substrate-offchain", path = "../../core/offchain" }
chain-spec = { package = "substrate-chain-spec", path = "../../core/chain-spec" }
contracts = { package = "srml-contracts", path = "../../srml/contracts" }

# node-specific dependencies
hb-node-runtime = { path = "../runtime" }
hb-node-rpc = { path = "../rpc" }
hb-node-primitives = { path = "../primitives" }
hb-node-executor = { path = "../executor" }
parking_lot = "0.9.0"
client_db = { package = "substrate-client-db", path = "../../core/client/db", default-features = false }

# CLI-specific dependencies
tokio = { version = "0.1.22", optional = true }
exit-future = { version = "0.1.4", optional = true }
substrate-cli = { path = "../../core/cli", optional = true }
transaction-factory = { path = "../../test-utils/transaction-factory", optional = true }
ctrlc = { version = "3.1.3", features = ["termination"], optional = true }

[dev-dependencies]
consensus-common = { package = "substrate-consensus-common", path = "../../core/consensus/common" }
service-test = { package = "substrate-service-test", path = "../../core/service/test" }
keystore = { package = "substrate-keystore", path = "../../core/keystore" }

[build-dependencies]
substrate-cli = { package = "substrate-cli", path = "../../core/cli" }
build-script-utils = { package = "substrate-build-script-utils", path = "../../core/utils/build-script-utils" }
structopt = "0.3.3"
vergen = "3.0.4"

[features]
default = ["cli"]
cli = [
	"substrate-cli",
	"transaction-factory",
	"tokio",
	"exit-future",
	"ctrlc",
	"substrate-service/rocksdb"
]
